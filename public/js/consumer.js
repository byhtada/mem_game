class ActionCableConsumer{constructor(){this.cable=null,this.subscriptions=new Map,this.connectionReady=!1,this.pendingSubscriptions=[],this.reconnectTimer=null,this.shouldReconnect=!0}connect(e="/cable",o={}){console.log("🔌 [ActionCableConsumer] Connecting to:",e,"with params:",o),this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.connectionReady=!1,this.cable&&(console.log("🔌 [ActionCableConsumer] Closing existing connection"),this.cable.close());const n=this.buildWebSocketUrl(e,o);console.log("🔌 [ActionCableConsumer] WebSocket URL:",n),this.cable=new WebSocket(n),this.lastUrl=e,this.lastParams=o,this.cable.onopen=()=>{console.log("🔗 [ActionCableConsumer] Connected to Action Cable"),this.connectionReady=!0,this.processPendingSubscriptions()},this.cable.onclose=e=>{console.log("❌ [ActionCableConsumer] Disconnected from Action Cable, code:",e.code,"reason:",e.reason),this.connectionReady=!1,this.shouldReconnect&&1e3!==e.code?(console.log("🔄 [ActionCableConsumer] Scheduling reconnection in 3 seconds..."),this.reconnectTimer=setTimeout(()=>{this.shouldReconnect&&(console.log("🔄 [ActionCableConsumer] Attempting reconnection..."),this.connect(this.lastUrl,this.lastParams))},3e3)):console.log("🔌 [ActionCableConsumer] Reconnection disabled or clean close")},this.cable.onmessage=e=>{console.log("📨 [ActionCableConsumer] Raw message received:",e.data);const o=JSON.parse(e.data);console.log("📨 [ActionCableConsumer] Parsed message:",o),this.handleMessage(o)},this.cable.onerror=e=>{console.error("❌ [ActionCableConsumer] WebSocket error:",e)}}processPendingSubscriptions(){for(console.log("🔄 [ActionCableConsumer] Processing pending subscriptions:",this.pendingSubscriptions.length);this.pendingSubscriptions.length>0;){const e=this.pendingSubscriptions.shift();console.log("🔄 [ActionCableConsumer] Processing pending subscription:",e.identifier),this.send({command:"subscribe",identifier:e.identifier})}}buildWebSocketUrl(e,o){const n="https:"===window.location.protocol?"wss:":"ws:",s=window.location.host,i=new URLSearchParams(o).toString();return`${n}//${s}${e}${i?"?"+i:""}`}subscribe(e,o={}){const n=JSON.stringify({channel:e,...o});console.log("📻 [ActionCableConsumer] Subscribing to channel:",e,"with params:",o),console.log("📻 [ActionCableConsumer] Identifier:",n);const s={identifier:n,connected:()=>{console.log("✅ [ActionCableConsumer] Subscription connected:",n)},disconnected:()=>{console.log("❌ [ActionCableConsumer] Subscription disconnected:",n)},received:e=>{console.log("📨 [ActionCableConsumer] Data received for subscription:",n,e)},perform:(e,o={})=>{console.log("🎬 [ActionCableConsumer] Performing action:",e,"with data:",o),this.send({command:"message",identifier:n,data:JSON.stringify({action:e,...o})})},unsubscribe:()=>{console.log("🔌 [ActionCableConsumer] Unsubscribing from:",n),this.send({command:"unsubscribe",identifier:n}),this.subscriptions.delete(n)}};return this.subscriptions.set(n,s),this.connectionReady?(console.log("📤 [ActionCableConsumer] Connection ready - sending subscribe command for:",n),this.send({command:"subscribe",identifier:n})):(console.log("⏳ [ActionCableConsumer] Connection not ready - queueing subscription for:",n),this.pendingSubscriptions.push({identifier:n})),s}send(e){if(console.log("📤 [ActionCableConsumer] Attempting to send:",e),this.cable&&this.cable.readyState===WebSocket.OPEN){const o=JSON.stringify(e);console.log("📤 [ActionCableConsumer] Sending JSON:",o),this.cable.send(o),console.log("📤 [ActionCableConsumer] Send completed")}else console.error("❌ [ActionCableConsumer] Cannot send - WebSocket not ready. ReadyState:",this.cable?.readyState),console.error("❌ [ActionCableConsumer] WebSocket states: CONNECTING=0, OPEN=1, CLOSING=2, CLOSED=3")}handleMessage(e){console.log("🔄 [ActionCableConsumer] Handling message:",e);const{identifier:o,message:n,type:s}=e;if(console.log("🔄 [ActionCableConsumer] Message details - identifier:",o,"type:",s,"data:",n),!o)return"welcome"===s?void console.log("🎉 [ActionCableConsumer] Welcome message received - connection ready"):"ping"===s?void console.log("💓 [ActionCableConsumer] Ping received:",n):void console.log("ℹ️ [ActionCableConsumer] System message:",s,n);const i=this.subscriptions.get(o);if(console.log("🔄 [ActionCableConsumer] Found subscription:",!!i),i)switch(s){case"confirm_subscription":console.log("✅ [ActionCableConsumer] Subscription confirmed for:",o),i.connected();break;case"reject_subscription":console.log("❌ [ActionCableConsumer] Subscription rejected for:",o),i.disconnected();break;default:console.log("📨 [ActionCableConsumer] Regular message for:",o,"data:",n),n&&i.received(n)}else console.warn("⚠️ [ActionCableConsumer] No subscription found for identifier:",o)}disconnect(){console.log("🔌 [ActionCableConsumer] Disconnecting..."),this.shouldReconnect=!1,this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.cable&&(this.cable.close(1e3,"Manual disconnect"),this.cable=null),this.connectionReady=!1,this.subscriptions.clear(),this.pendingSubscriptions=[],console.log("🔌 [ActionCableConsumer] Disconnected and cleaned up")}}window.actionCableConsumer=new ActionCableConsumer;