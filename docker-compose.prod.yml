services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: memgame_production
      POSTGRES_USER: memgame
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U memgame"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  web:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://memgame:${DB_PASSWORD}@db:5432/memgame_production
      REDIS_URL: redis://redis:6379/0
      RAILS_ENV: production
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      RAILS_SERVE_STATIC_FILES: true
      RAILS_LOG_TO_STDOUT: true
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    command: >
      bash -c "
        bundle exec rails db:create 2>/dev/null || true &&
        bundle exec rails db:migrate &&
        bundle exec rails server -b 0.0.0.0
      "
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  sidekiq:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://memgame:${DB_PASSWORD}@db:5432/memgame_production
      REDIS_URL: redis://redis:6379/0
      RAILS_ENV: production
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      RAILS_LOG_TO_STDOUT: true
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
    networks:
      - backend
    restart: unless-stopped
    command: bundle exec sidekiq
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx для production (опционально)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./certbot/www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      web:
        condition: service_healthy
    networks:
      - frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Для получения SSL сертификатов
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot:rw
      - ./certbot/conf:/etc/letsencrypt:rw
    networks:
      - frontend
    profiles:
      - certbot

volumes:
  postgres_data:
  redis_data:
  nginx_logs:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge 