#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/update-ssl.sh /path/to/new/cert.crt /path/to/new/private.key

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_DIR="/opt/memgame"
SSL_DIR="$PROJECT_DIR/ssl"
DOCKER_COMPOSE="docker-compose -f docker-compose.prod.yml"

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -ne 2 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <certificate_file> <private_key_file>"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä:"
    echo "  $0 /path/to/new_cert.crt /path/to/new_key.key"
    echo "  $0 /path/to/combined_cert.pem /path/to/private.key"
    exit 1
fi

CERT_FILE="$1"
KEY_FILE="$2"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
check_files() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
    
    if [ ! -f "$CERT_FILE" ]; then
        log_error "–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $CERT_FILE"
        exit 1
    fi
    
    if [ ! -f "$KEY_FILE" ]; then
        log_error "–§–∞–π–ª –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $KEY_FILE"
        exit 1
    fi
    
    log_info "‚úÖ –§–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
validate_certificate() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if ! openssl x509 -in "$CERT_FILE" -noout 2>/dev/null; then
        log_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞
    if ! openssl rsa -in "$KEY_FILE" -check -noout 2>/dev/null; then
        log_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    cert_modulus=$(openssl x509 -noout -modulus -in "$CERT_FILE" | openssl md5)
    key_modulus=$(openssl rsa -noout -modulus -in "$KEY_FILE" | openssl md5)
    
    if [ "$cert_modulus" != "$key_modulus" ]; then
        log_error "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É"
        exit 1
    fi
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
    log_info "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ:"
    openssl x509 -in "$CERT_FILE" -noout -subject -issuer -dates
    
    log_info "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–∞–ª–∏–¥–µ–Ω"
}

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
backup_current_certs() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
    if [ -f "$SSL_DIR/cert.pem" ] && [ -f "$SSL_DIR/key.pem" ]; then
        backup_dir="$SSL_DIR/backup_$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$backup_dir"
        
        cp "$SSL_DIR/cert.pem" "$backup_dir/"
        cp "$SSL_DIR/key.pem" "$backup_dir/"
        
        log_info "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backup_dir"
    else
        log_warn "–¢–µ–∫—É—â–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º backup"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
install_new_certs() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ SSL –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    mkdir -p "$SSL_DIR"
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    cp "$CERT_FILE" "$SSL_DIR/cert.pem"
    cp "$KEY_FILE" "$SSL_DIR/key.pem"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    chmod 644 "$SSL_DIR/cert.pem"
    chmod 600 "$SSL_DIR/key.pem"
    
    log_info "‚úÖ –ù–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx
restart_nginx() {
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx..."
    
    cd "$PROJECT_DIR"
    
    if $DOCKER_COMPOSE ps nginx | grep -q "Up"; then
        $DOCKER_COMPOSE restart nginx
        log_info "‚úÖ Nginx –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
    else
        log_warn "Nginx –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã..."
        $DOCKER_COMPOSE up -d
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã SSL
test_ssl() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã SSL..."
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Nginx
    sleep 5
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ .env
    if [ -f "$PROJECT_DIR/.env" ]; then
        domain=$(grep "^DOMAIN=" "$PROJECT_DIR/.env" | cut -d'=' -f2)
        
        if [ -n "$domain" ]; then
            log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSL –¥–ª—è –¥–æ–º–µ–Ω–∞: $domain"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if echo | openssl s_client -connect "$domain:443" -servername "$domain" 2>/dev/null | grep -q "Verify return code: 0"; then
                log_info "‚úÖ SSL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            else
                log_warn "SSL –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é"
            fi
        else
            log_warn "–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"
        fi
    else
        log_warn "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"
    fi
    
    log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSL –≤—Ä—É—á–Ω—É—é: curl -I https://yourdomain.com"
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
send_notification() {
    local status=$1
    local message=$2
    
    if [ -f "$PROJECT_DIR/.env" ]; then
        source "$PROJECT_DIR/.env"
        
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
                --data "{\"text\":\"üîê MemGame SSL Update $status: $message\"}" \
                "$SLACK_WEBHOOK_URL" 2>/dev/null || true
        fi
        
        if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                -d chat_id="$TELEGRAM_CHAT_ID" \
                -d text="üîê MemGame SSL Update $status: $message" 2>/dev/null || true
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "üîê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è MemGame..."
    
    check_files
    validate_certificate
    backup_current_certs
    install_new_certs
    restart_nginx
    test_ssl
    
    send_notification "Success" "SSL certificate updated successfully"
    
    log_info "üéâ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    log_info "üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:"
    echo "  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
    echo "  ‚Ä¢ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
    echo "  ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
    echo "  ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω Nginx"
    echo "  ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ SSL"
    echo
    log_info "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É: https://yourdomain.com"
}

# –ó–∞–ø—É—Å–∫
main 