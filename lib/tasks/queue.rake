# frozen_string_literal: true

namespace :queue do
  desc "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π"
  task status: :environment do
    require_relative '../delayed_job_monitor'
    DelayedJobMonitor.status
  end

  desc "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏"
  task clear: :environment do
    require_relative '../delayed_job_monitor'
    DelayedJobMonitor.clear_all
  end

  desc "–û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏"
  task clear_failed: :environment do
    require_relative '../delayed_job_monitor'
    DelayedJobMonitor.clear_failed
  end

  desc "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏"
  task retry_failed: :environment do
    require_relative '../delayed_job_monitor'
    DelayedJobMonitor.retry_failed
  end

  desc "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"
  task delayed: :environment do
    puts "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ Delayed Job:"
    
    upcoming = Delayed::Job.where('run_at > ?', Time.current).order(:run_at)
    
    if upcoming.any?
      upcoming.each do |job|
        job_class = job.handler.match(/job_class: (\w+)/)&.captures&.first || 'Unknown'
        delay = job.run_at - Time.current
        puts "#{job_class}"
        puts "  –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: #{job.run_at}"
        puts "  –ó–∞–¥–µ—Ä–∂–∫–∞: #{delay.round(2)} —Å–µ–∫—É–Ω–¥"
        puts "  ID: #{job.id}"
        puts ""
      end
    else
      puts "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"
    end
  end
end 