# frozen_string_literal: true

class DelayedJobMonitor
  def self.status
    puts "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Delayed Job:"
    puts "–í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: #{Delayed::Job.count}"
    puts "–û–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: #{Delayed::Job.where('run_at <= ?', Time.current).count}"
    puts "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –±—É–¥—É—â–µ–µ: #{Delayed::Job.where('run_at > ?', Time.current).count}"
    puts "–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: #{Delayed::Job.where('attempts > 0').count}"
    puts "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: #{Delayed::Job.where('locked_at IS NOT NULL').count}"
    puts ""
    
    puts "ÔøΩÔøΩ –ó–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø–∞–º:"
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–¥–∞—á –ø–æ —Ç–∏–ø–∞–º
    types = {}
    Delayed::Job.all.each do |job|
      begin
        handler = YAML.load(job.handler)
        job_class = handler.class.name if handler.respond_to?(:class)
        types[job_class] ||= 0
        types[job_class] += 1
      rescue => e
        types['Unknown'] ||= 0
        types['Unknown'] += 1
      end
    end
    
    if types.empty?
      puts "  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
    else
      types.each do |type, count|
        puts "  #{type}: #{count}"
      end
    end
    puts ""
    
    puts "üîÑ –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:"
    upcoming = Delayed::Job.where('run_at > ?', Time.current).order(:run_at).limit(10)
    if upcoming.any?
      upcoming.each do |job|
        job_class = extract_job_class(job.handler)
        delay = job.run_at - Time.current
        puts "#{job_class} - —á–µ—Ä–µ–∑ #{delay.round(2)} —Å–µ–∫—É–Ω–¥ (#{job.run_at})"
      end
    else
      puts "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"
    end
    puts ""
    
    puts "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏:"
    failed = Delayed::Job.where('attempts > 0')
    if failed.any?
      failed.each do |job|
        job_class = extract_job_class(job.handler)
        puts "#{job_class} - –ø–æ–ø—ã—Ç–æ–∫: #{job.attempts}, –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: #{job.last_error&.split("\n")&.first}"
      end
    else
      puts "–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç"
    end
  end
  
  def self.clear_all
    count = Delayed::Job.count
    Delayed::Job.delete_all
    puts "üßπ –£–¥–∞–ª–µ–Ω–æ #{count} –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏!"
  end
  
  def self.clear_failed
    count = Delayed::Job.where('attempts > 0').count
    Delayed::Job.where('attempts > 0').delete_all
    puts "üßπ –£–¥–∞–ª–µ–Ω–æ #{count} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á!"
  end
  
  def self.retry_failed
    failed = Delayed::Job.where('attempts > 0')
    count = failed.count
    failed.update_all(attempts: 0, run_at: Time.current, locked_at: nil, locked_by: nil)
    puts "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ #{count} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á"
  end
  
  def self.delayed_jobs
    puts "‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:"
    future_jobs = Delayed::Job.where('run_at > ?', Time.current).order(:run_at)
    
    if future_jobs.empty?
      puts "  –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"
    else
      future_jobs.each do |job|
        begin
          handler = YAML.load(job.handler)
          job_class = handler.class.name if handler.respond_to?(:class)
          puts "  #{job_class} - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ #{job.run_at} (—á–µ—Ä–µ–∑ #{time_until(job.run_at)})"
        rescue => e
          puts "  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ #{job.run_at}"
        end
      end
    end
  end
  
  private
  
  def self.extract_job_class(handler)
    match = handler.match(/job_class: (\w+)/)
    match ? match[1] : 'Unknown'
  rescue
    'Unknown'
  end
  
  def self.time_until(time)
    diff = time - Time.current
    if diff < 60
      "#{diff.round} —Å–µ–∫"
    elsif diff < 3600
      "#{(diff / 60).round} –º–∏–Ω"
    else
      "#{(diff / 3600).round} —á"
    end
  end
end 